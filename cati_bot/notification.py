#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import asyncio
import requests
import json
from typing import Dict, Any, List, Optional

from config import CONFIG, COIN_DESCRIPTIONS, SIGNAL_TYPE_DESCRIPTIONS
from cati_bot.utils import logger


class NotificationSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram-–∫–æ–º–∞–Ω–¥"""

    def __init__(self):
        self.coin_descriptions = COIN_DESCRIPTIONS
        self.signal_type_descriptions = SIGNAL_TYPE_DESCRIPTIONS

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.telegram_enabled = bool(CONFIG["telegram_bot_token"] and CONFIG["telegram_chat_id"])

        if self.telegram_enabled:
            logger.info(
                f"Telegram –≤–∫–ª—é—á–µ–Ω. –¢–æ–∫–µ–Ω: {CONFIG['telegram_bot_token'][:5]}... –ß–∞—Ç ID: {CONFIG['telegram_chat_id']}")
        else:
            logger.warning("Telegram –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ telegram_bot_token –∏ telegram_chat_id –≤ config.py")

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id
        self.last_update_id = 0

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–Ω–µ—Ç—ã
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        self.user_subscriptions = {
            str(CONFIG["telegram_chat_id"]): {
                "coins": ["ALL"],
                "signal_type": CONFIG["default_signal_type"]
            }
        }

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.user_context = {}  # {chat_id: {'state': 'wait_for_coin', 'data': {}}}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        self._check_telegram_connection()

    def _check_telegram_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        if not self.telegram_enabled:
            logger.warning("Telegram –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/getMe"
            response = requests.get(url, timeout=10)
            data = response.json()

            if data.get("ok"):
                bot_username = data.get("result", {}).get("username", "Unknown")
                bot_name = data.get("result", {}).get("first_name", "Unknown")
                logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç: {bot_name} (@{bot_username})")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = f"ü§ñ –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                try:
                    send_url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/sendMessage"
                    payload = {
                        "chat_id": CONFIG["telegram_chat_id"],
                        "text": test_message
                    }

                    send_response = requests.post(send_url, json=payload, timeout=10)
                    send_data = send_response.json()

                    if send_data.get("ok"):
                        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {CONFIG['telegram_chat_id']}")
                    else:
                        error_msg = send_data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}")

                        if "chat not found" in error_msg.lower():
                            logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —á–∞—Ç–∞: {CONFIG['telegram_chat_id']}")
                        elif "blocked" in error_msg.lower():
                            logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram.")

                        return False
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return False

                return True
            else:
                error_msg = data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {error_msg}")

                if "unauthorized" in error_msg.lower():
                    logger.error("–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ config.py.")

                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
            return False

    async def send_signal_notification(self, signal: Dict[str, Any]) -> bool:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–≥–Ω–∞–ª–∞
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(signal)}")
            if signal is not None:
                logger.info(f"–ö–ª—é—á–∏ —Å–∏–≥–Ω–∞–ª–∞: {list(signal.keys())}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º HOLD
                if signal.get('signal_type') == "HOLD":
                    logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —Ç–∏–ø–∞ HOLD –¥–ª—è {signal.get('symbol')}")
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ
                confidence = signal.get('confidence', 0)
                if confidence < 0.6:  # –ü–æ—Ä–æ–≥ 60%
                    logger.info(
                        f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ({confidence * 100:.2f}%) –¥–ª—è {signal.get('symbol')}")
                    return False

                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ä–æ–∫–∞ —Å–∏–≥–Ω–∞–ª–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ALL
                signal_term_type = signal.get('term_type', 'ALL')
                logger.info(f"–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {signal_term_type}")
            else:
                logger.error("–°–∏–≥–Ω–∞–ª —Ä–∞–≤–µ–Ω None")
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_signal_message(signal)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.telegram_enabled:
                logger.info(f"–¢–µ–ª–µ–≥—Ä–∞–º –≤–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è {signal['symbol']}")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –∏ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
                symbol = signal['symbol']
                signal_term_type = signal.get('term_type', 'ALL')
                subscribers_found = False
                sent_to_main_chat = False

                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                logger.info(f"–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.user_subscriptions}")

                for chat_id, subscription in self.user_subscriptions.items():
                    coins = subscription.get("coins", [])
                    user_signal_type = subscription.get("signal_type", "ALL")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–Ω–µ—Ç—ã
                    coin_match = symbol in coins or 'ALL' in coins

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                    signal_type_match = (
                            user_signal_type == signal_term_type or
                            user_signal_type == "ALL" or
                            signal_term_type == "ALL"
                    )

                    logger.info(
                        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {chat_id}: –º–æ–Ω–µ—Ç–∞ {symbol} ({coin_match}), —Ç–∏–ø {signal_term_type} ({signal_type_match})")

                    if coin_match and signal_type_match:
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ {chat_id} –¥–ª—è {symbol} —Å —Ç–∏–ø–æ–º —Å–∏–≥–Ω–∞–ª–∞ {signal_term_type}")
                        subscribers_found = True
                        success = await self._send_telegram_message(message, chat_id)
                        # –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                        if str(chat_id) == str(CONFIG["telegram_chat_id"]):
                            sent_to_main_chat = True
                        if not success:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {chat_id}")

                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –º–æ–Ω–µ—Ç—É –∏ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Ç
                if not subscribers_found:
                    logger.info(
                        f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è {symbol} —Å —Ç–∏–ø–æ–º {signal_term_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Ç {CONFIG['telegram_chat_id']}")
                    await self._send_telegram_message(message, str(CONFIG["telegram_chat_id"]))
                    sent_to_main_chat = True

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if CONFIG["telegram_chat_id"] and CONFIG.get("always_send_to_main_chat",
                                                             True) and not sent_to_main_chat:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å–∏–≥–Ω–∞–ª–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç {CONFIG['telegram_chat_id']}")
                    await self._send_telegram_message(message, str(CONFIG["telegram_chat_id"]))
            else:
                logger.warning("–¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False

    def _format_signal_message(self, signal: Dict[str, Any]) -> str:
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            emoji_map = {
                'BUY': 'üü¢ –ü–û–ö–£–ü–ö–ê',
                'SELL': 'üî¥ –ü–†–û–î–ê–ñ–ê',
                'HOLD': '‚ö™ –û–ñ–ò–î–ê–ù–ò–ï'
            }

            term_type_emoji = {
                'SHORT': '‚ö°',  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π
                'LONG': 'üîÆ',  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π
                'ALL': 'üìä'  # –í—Å–µ —Ç–∏–ø—ã
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            term_type = signal.get('term_type', 'ALL')
            term_emoji = term_type_emoji.get(term_type, '')

            message = f"{emoji_map.get(signal['signal_type'], signal['signal_type'])} | {signal['symbol']} {term_emoji}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å–∏–≥–Ω–∞–ª–∞
            if term_type != "ALL":
                message += f"–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {self.signal_type_descriptions.get(term_type, term_type)}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            market_info = signal.get('market_info', [])
            if market_info:
                message += "\n".join(market_info) + "\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
            trend = signal.get('trend', {})
            if trend:
                message += "–¢—Ä–µ–Ω–¥—ã:\n"
                for timeframe, trend_val in trend.items():
                    if timeframe == '–æ–±—â–∏–π':
                        continue
                    message += f"- {timeframe}: {trend_val}\n"
                message += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ
            market_cycles = signal.get('market_cycles', {})
            if market_cycles and market_cycles.get('phase'):
                market_phase = market_cycles.get('phase')
                confidence = market_cycles.get('confidence', 0) * 100
                message += f"–†—ã–Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞: {market_phase} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f}%)\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                patterns = market_cycles.get('patterns', [])
                if patterns:
                    message += "–ó–∞–º–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
                    for pattern in patterns:
                        message += f"- {pattern['pattern']} ({pattern['confidence'] * 100:.0f}%)\n"
                    message += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if signal['signal_type'] != 'HOLD':
                strength = signal.get('strength', 0)
                message += f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {strength * 100:.0f}%\n"
                # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ
                confidence = signal.get('confidence', 0)
                if confidence > 0:
                    message += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.0f}%\n\n"
                else:
                    message += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            suggested_actions = signal.get('suggested_actions', [])
            if suggested_actions:
                message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                message += "\n".join(suggested_actions) + "\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
            messages = signal.get('messages', [])
            if messages:
                message += "–ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞:\n"
                message += "\n".join(messages) + "\n"

            return message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {signal.get('symbol', 'Unknown')}"

    async def _send_telegram_message(self, message: str, chat_id: str) -> bool:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not CONFIG["telegram_bot_token"]:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω")
                return False

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (chat_id: {chat_id})...")

            url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": message
            }

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(message) > 4000:
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
                chunks = [message[i:i + 4000] for i in range(0, len(message), 4000)]
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π")

                success = True
                for i, chunk in enumerate(chunks):
                    chunk_payload = {
                        "chat_id": chat_id,
                        "text": f"(–ß–∞—Å—Ç—å {i + 1}/{len(chunks)}) {chunk}"
                    }

                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            response = requests.post(url, json=chunk_payload, timeout=30)
                            response.raise_for_status()

                            data = response.json()
                            if not data.get("ok"):
                                error_msg = data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                                logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {error_msg}")
                                return False

                            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                        except Exception as e:
                            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                            if attempt < max_retries - 1:
                                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                            else:
                                success = False
                                logger.error(
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i + 1} —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

                return success
            else:
                # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        response = requests.post(url, json=payload, timeout=30)

                        data = response.json()
                        if not data.get("ok"):
                            error_msg = data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {error_msg}")

                            if "chat not found" in error_msg.lower():
                                logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —á–∞—Ç–∞: {chat_id}")
                            elif "blocked" in error_msg.lower():
                                logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç–µ {chat_id}")

                            return False

                        response.raise_for_status()
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                    except Exception as e:
                        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        if attempt < max_retries - 1:
                            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        else:
                            import traceback
                            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                            return False

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id})")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False

    async def poll_updates(self) -> None:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"""
        if not self.telegram_enabled:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω.")
            return

        while True:
            try:
                await self._check_telegram_updates()
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ Telegram: {e}")
                await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def _check_telegram_updates(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/getUpdates"
            params = {
                "offset": self.last_update_id + 1,
                "timeout": 30
            }

            max_retries = 3
            for attempt in range(max_retries):
                try:
                    response = requests.get(url, params=params, timeout=30)
                    response.raise_for_status()
                    updates = response.json()

                    if updates.get("ok") and updates.get("result"):
                        for update in updates["result"]:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id
                            self.last_update_id = max(self.last_update_id, update["update_id"])

                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if "message" in update and "text" in update["message"]:
                                await self._process_message(update["message"])
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                except Exception as e:
                    logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    else:
                        raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: {e}")

    async def _process_message(self, message: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_id = str(message["chat"]["id"])
            text = message["text"]
            user_name = message["from"].get("username", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({chat_id}): {text}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if chat_id not in self.user_context:
                self.user_context[chat_id] = {"state": "idle", "data": {}}

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
            if chat_id not in self.user_subscriptions:
                self.user_subscriptions[chat_id] = {
                    "coins": [],
                    "signal_type": CONFIG["default_signal_type"]
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ)
            if self.user_context[chat_id]["state"] != "idle":
                await self._process_context_dialog(chat_id, text)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith("/"):
                await self._process_command(chat_id, text)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
                await self._send_help_message(chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

    async def _process_command(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            command = text.split()[0].lower()

            if command == "/start" or command == "/help":
                await self._send_help_message(chat_id)

            elif command == "/subscribe":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                self.user_context[chat_id] = {"state": "wait_for_subscribe", "data": {}}
                await self._send_available_coins(chat_id)

            elif command == "/unsubscribe":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
                self.user_context[chat_id] = {"state": "wait_for_unsubscribe", "data": {}}
                await self._send_user_subscriptions(chat_id)

            elif command == "/analyze":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                self.user_context[chat_id] = {"state": "wait_for_analyze", "data": {}}
                await self._send_available_coins(chat_id)

            elif command == "/list":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç
                await self._send_available_coins(chat_id)

            elif command == "/mycoins":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._send_user_subscriptions(chat_id)

            elif command == "/signaltype":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                self.user_context[chat_id] = {"state": "wait_for_signal_type", "data": {}}
                await self._send_available_signal_types(chat_id)

            elif command == "/mysignaltype":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._send_user_signal_type(chat_id)

            elif command == "/test":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await self._send_telegram_message("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                                                  chat_id)

            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                await self._send_telegram_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                                                  chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

    async def _process_context_dialog(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            state = self.user_context[chat_id]["state"]

            if state == "wait_for_subscribe":
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–µ—Ç—É
                await self._handle_subscribe(chat_id, text)

            elif state == "wait_for_unsubscribe":
                # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –º–æ–Ω–µ—Ç—ã
                await self._handle_unsubscribe(chat_id, text)

            elif state == "wait_for_analyze":
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã
                await self._handle_analyze_request(chat_id, text)

            elif state == "wait_for_signal_type":
                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                await self._handle_signal_type_selection(chat_id, text)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            self.user_context[chat_id] = {"state": "idle", "data": {}}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

    async def _handle_subscribe(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–æ–Ω–µ—Ç—É"""
        try:
            if text == "–í–°–ï":
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –º–æ–Ω–µ—Ç—ã
                if chat_id in self.user_subscriptions:
                    self.user_subscriptions[chat_id]["coins"] = ["ALL"]
                else:
                    self.user_subscriptions[chat_id] = {
                        "coins": ["ALL"],
                        "signal_type": CONFIG["default_signal_type"]
                    }
                await self._send_telegram_message("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –í–°–ï–ú –º–æ–Ω–µ—Ç–∞–º!", chat_id)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–µ—Ç–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            coin = text.upper()
            if coin not in CONFIG["available_symbols"]:
                await self._send_telegram_message(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.", chat_id)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id in self.user_subscriptions:
                if "ALL" in self.user_subscriptions[chat_id]["coins"]:
                    # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ, —É–¥–∞–ª—è–µ–º –µ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–Ω–µ—Ç—É
                    self.user_subscriptions[chat_id]["coins"] = [coin]
                elif coin not in self.user_subscriptions[chat_id]["coins"]:
                    self.user_subscriptions[chat_id]["coins"].append(coin)
            else:
                self.user_subscriptions[chat_id] = {
                    "coins": [coin],
                    "signal_type": CONFIG["default_signal_type"]
                }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await self._send_telegram_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {coin}!", chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    async def _handle_unsubscribe(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –º–æ–Ω–µ—Ç—ã"""
        try:
            if text == "–í–°–ï":
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
                if chat_id in self.user_subscriptions:
                    self.user_subscriptions[chat_id]["coins"] = []
                else:
                    self.user_subscriptions[chat_id] = {
                        "coins": [],
                        "signal_type": CONFIG["default_signal_type"]
                    }
                await self._send_telegram_message("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!", chat_id)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –º–æ–Ω–µ—Ç—É
            coin = text.upper()
            if chat_id in self.user_subscriptions:
                if coin in self.user_subscriptions[chat_id]["coins"]:
                    self.user_subscriptions[chat_id]["coins"].remove(coin)
                    await self._send_telegram_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ {coin}!", chat_id)
                elif "ALL" in self.user_subscriptions[chat_id]["coins"]:
                    # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ, —É–¥–∞–ª—è–µ–º –µ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π
                    self.user_subscriptions[chat_id]["coins"] = [c for c in CONFIG["available_symbols"] if c != coin]
                    await self._send_telegram_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ {coin}!", chat_id)
                else:
                    await self._send_telegram_message(f"‚ùì –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {coin}.", chat_id)
            else:
                await self._send_telegram_message(f"‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")

    async def _handle_analyze_request(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
        try:
            coin = text.upper()
            if coin not in CONFIG["available_symbols"]:
                await self._send_telegram_message(f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.", chat_id)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω
            await self._send_telegram_message(
                f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ {coin} –ø—Ä–∏–Ω—è—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", chat_id)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –≤ user_context –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.user_context[chat_id]["data"]["analyze_symbol"] = coin
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
            self.user_context[chat_id]["state"] = "wait_for_analyze_processing"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def _handle_signal_type_selection(self, chat_id: str, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            signal_type = text.upper()
            if signal_type not in CONFIG["signal_types"]:
                await self._send_telegram_message(f"‚ùå –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ {signal_type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.", chat_id)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id in self.user_subscriptions:
                self.user_subscriptions[chat_id]["signal_type"] = signal_type
            else:
                self.user_subscriptions[chat_id] = {
                    "coins": [],
                    "signal_type": signal_type
                }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            signal_description = self.signal_type_descriptions.get(signal_type, signal_type)
            await self._send_telegram_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞: {signal_description}", chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _send_help_message(self, chat_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = (
                "ü§ñ *–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç* ü§ñ\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –º–æ–Ω–µ—Ç–µ\n"
                "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –º–æ–Ω–µ—Ç–µ\n"
                "/analyze - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã\n"
                "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                "/mycoins - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "/signaltype - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ/–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ/–≤—Å–µ)\n"
                "/mysignaltype - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "/test - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏."
            )
            await self._send_telegram_message(message, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")

    async def _send_available_coins(self, chat_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        try:
            message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã:\n\n"

            for symbol in CONFIG["available_symbols"]:
                description = self.coin_descriptions.get(symbol, "")
                message += f"‚Ä¢ {symbol} - {description}\n"

            message += "\n–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä '–í–°–ï' –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –º–æ–Ω–µ—Ç—ã."

            await self._send_telegram_message(message, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {e}")

    async def _send_available_signal_types(self, chat_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            message = "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"

            for signal_type in CONFIG["signal_types"]:
                description = self.signal_type_descriptions.get(signal_type, signal_type)
                message += f"‚Ä¢ {signal_type} - {description}\n"

            message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."

            await self._send_telegram_message(message, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def _send_user_subscriptions(self, chat_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if chat_id not in self.user_subscriptions or not self.user_subscriptions[chat_id]["coins"]:
                await self._send_telegram_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –º–æ–Ω–µ—Ç—ã.", chat_id)
                return

            if "ALL" in self.user_subscriptions[chat_id]["coins"]:
                await self._send_telegram_message("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –í–°–ï –º–æ–Ω–µ—Ç—ã! üåü", chat_id)
                return

            message = "üìä –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            for symbol in self.user_subscriptions[chat_id]["coins"]:
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
                description = self.coin_descriptions.get(symbol, "")
                message += f"‚Ä¢ {symbol} - {description}\n"

            await self._send_telegram_message(message, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    async def _send_user_signal_type(self, chat_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç–∏–ø–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if chat_id not in self.user_subscriptions:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                signal_type = CONFIG["default_signal_type"]
                self.user_subscriptions[chat_id] = {
                    "coins": [],
                    "signal_type": signal_type
                }
            else:
                signal_type = self.user_subscriptions[chat_id].get("signal_type", CONFIG["default_signal_type"])

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            signal_description = self.signal_type_descriptions.get(signal_type, signal_type)

            message = f"üîî –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_type} - {signal_description}\n\n"
            message += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /signaltype"

            await self._send_telegram_message(message, chat_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    def get_analyze_requests(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            requests = []

            for chat_id, context in self.user_context.items():
                if context["state"] == "wait_for_analyze_processing" and "analyze_symbol" in context["data"]:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    signal_type = "ALL"
                    if chat_id in self.user_subscriptions:
                        signal_type = self.user_subscriptions[chat_id].get("signal_type", "ALL")

                    requests.append({
                        "chat_id": chat_id,
                        "symbol": context["data"]["analyze_symbol"],
                        "signal_type": signal_type
                    })
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    self.user_context[chat_id] = {"state": "idle", "data": {}}

            return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑: {e}")
            return []
