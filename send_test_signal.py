#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞.
"""

import asyncio
import json
import argparse
import sys
import os
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–≥–µ—Ä
from config import CONFIG, COIN_DESCRIPTIONS
from cati_bot.utils import logger

async def send_test_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{CONFIG['telegram_bot_token']}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message
        }
        
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}...")
        
        response = requests.post(url, json=payload, timeout=30)
        data = response.json()
        
        if data.get("ok"):
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            return True
        else:
            error_msg = data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def send_test_signal(chat_id, symbol):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        test_signal = create_test_signal(symbol)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_signal_message(test_signal)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await send_test_message(chat_id, message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False

def create_test_signal(symbol):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞
    signal = {
        "timestamp": datetime.now().isoformat(),
        "symbol": symbol,
        "signal_type": "BUY",
        "strength": 0.75,
        "price": 1000.00,
        "messages": [
            "5m: RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (28.35) (70%)",
            "15m: RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (24.12) (70%)",
            "1h: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã (60%)"
        ],
        "suggested_actions": [
            "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: 1000.00",
            "–ë–ª–∏–∂–∞–π—à–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 1130.00 (13.00%)",
            "–°—Ç–æ–ø-–ª–æ—Å—Å: 970.00 (3%)",
            "",
            "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:",
            "1. 1450.00 (45.00% –æ—Ç —Ç–µ–∫—É—â–µ–π) - –£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è #2",
            "2. 1320.00 (32.00% –æ—Ç —Ç–µ–∫—É—â–µ–π) - –£—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è #1",
            "3. 1200.00 (20.00% –æ—Ç —Ç–µ–∫—É—â–µ–π) - –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π",
            "",
            "–ü—Ä–æ–≥–Ω–æ–∑—ã –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã:",
            "6 —á–∞—Å–æ–≤: ‚ÜóÔ∏è 1020.00 (¬±2.00%)",
            "  –î–∏–∞–ø–∞–∑–æ–Ω: 980.00 - 1040.00",
            "24 —á–∞—Å–∞: ‚ÜóÔ∏è 1080.00 (¬±8.00%)",
            "  –î–∏–∞–ø–∞–∑–æ–Ω: 920.00 - 1130.00",
            "7 –¥–Ω–µ–π: ‚ÜóÔ∏è 1200.00 (¬±20.00%)",
            "  –î–∏–∞–ø–∞–∑–æ–Ω: 800.00 - 1200.00"
        ],
        "market_info": [
            f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol}",
            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 1000.00",
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: +5.25%",
            "–û–±—â–∏–π —Ç—Ä–µ–Ω–¥: –≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "–†—ã–Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞: –±—ã—á–∏–π",
            "–ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 970.00",
            "–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 1130.00"
        ],
        "trend": {
            "5m": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "15m": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "1h": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "4h": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "–æ–±—â–∏–π": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π"
        },
        "market_cycles": {
            "phase": "–±—ã—á–∏–π",
            "confidence": 0.8,
            "patterns": [
                {
                    "pattern": "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞",
                    "confidence": 0.7,
                    "description": "–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±—ã—á—å–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞"
                },
                {
                    "pattern": "–ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                    "confidence": 0.65,
                    "description": "–ü—Ä–æ–±–æ–π –≤–∞–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
                }
            ],
            "price_change_percent": 8.5
        },
        "price_predictions": {
            "short_term": {
                "min": 980.00,
                "max": 1040.00,
                "expected": 1020.00,
                "confidence": 0.8
            },
            "medium_term": {
                "min": 920.00,
                "max": 1130.00,
                "expected": 1080.00,
                "confidence": 0.6
            },
            "long_term": {
                "min": 800.00,
                "max": 1200.00,
                "expected": 1200.00,
                "confidence": 0.4
            }
        }
    }
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    coin_description = COIN_DESCRIPTIONS.get(symbol, "")
    if coin_description:
        description_line = f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {symbol} - {coin_description}"
        signal["market_info"][0] = description_line
    
    return signal

def format_signal_message(signal):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
    emoji_map = {
        'BUY': 'üü¢ –ü–û–ö–£–ü–ö–ê',
        'SELL': 'üî¥ –ü–†–û–î–ê–ñ–ê',
        'HOLD': '‚ö™ –û–ñ–ò–î–ê–ù–ò–ï'
    }
    
    message = f"{emoji_map.get(signal['signal_type'], signal['signal_type'])} | {signal['symbol']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
    message += "\n".join(signal['market_info']) + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
    message += "–¢—Ä–µ–Ω–¥—ã:\n"
    for timeframe, trend in signal['trend'].items():
        if timeframe == '–æ–±—â–∏–π':
            continue
        message += f"- {timeframe}: {trend}\n"
    message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ
    if 'market_cycles' in signal and signal['market_cycles'].get('phase'):
        market_phase = signal['market_cycles'].get('phase')
        confidence = signal['market_cycles'].get('confidence', 0) * 100
        message += f"–†—ã–Ω–æ—á–Ω–∞—è —Ñ–∞–∑–∞: {market_phase} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f}%)\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        patterns = signal['market_cycles'].get('patterns', [])
        if patterns:
            message += "–ó–∞–º–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n"
            for pattern in patterns:
                message += f"- {pattern['pattern']} ({pattern['confidence'] * 100:.0f}%)\n"
            message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
    if signal['signal_type'] != 'HOLD':
        message += f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal['strength'] * 100:.0f}%\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
    message += "\n".join(signal['suggested_actions']) + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
    if signal['messages']:
        message += "–ü—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞:\n"
        message += "\n".join(signal['messages']) + "\n"
    
    return message

async def main():
    parser = argparse.ArgumentParser(description="–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram")
    parser.add_argument("--chat_id", help="ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.py)", default=CONFIG["telegram_chat_id"])
    parser.add_argument("--symbol", help="–°–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞", default="BTCUSDT")
    parser.add_argument("--message", help="–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª–∞")
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if not CONFIG["telegram_bot_token"]:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ config.py")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —É–∫–∞–∑–∞–Ω
    if not args.chat_id:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –≤ config.py")
        return 1
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if args.message:
        success = await send_test_message(args.chat_id, args.message)
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        symbol = args.symbol.upper()
        if symbol not in CONFIG["available_symbols"]:
            print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª.")
        
        success = await send_test_signal(args.chat_id, symbol)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))